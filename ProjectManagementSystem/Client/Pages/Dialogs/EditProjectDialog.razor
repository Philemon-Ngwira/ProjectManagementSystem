@using Microsoft.AspNetCore.Components.Forms
@using MudBlazor
@using ProjectManagementSystem.Client.Services
@using ProjectManagementSystem.Shared.Models

<MudDialog>
    <DialogContent>
        <MudForm>
            <MudCard>
                <MudImage Src="@project.ProjectImage"></MudImage>
            </MudCard>

            <MudGrid>

                <MudItem xs="12" md="6">
                    <MudTextField T="string" @bind-Value="@project.ProjectName" Label="Project Name" Variant="Variant.Filled"></MudTextField>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField T="string" @bind-Value="@project.ProjectCode" Label="Project Code" Variant="Variant.Filled"></MudTextField>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect T="ProjectType" @bind-Value="project.ProjectTypeNavigation" Label="Project Type" AdornmentIcon="@Icons.Material.Filled.SavedSearch" Variant="Variant.Filled">
                        @foreach (var item in projectTypes)
                        {
                            <MudSelectItem T="ProjectType" Value="item">@item.ProjectTypeName</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudDatePicker Label="Release Date" @bind-Date="project.ExpectedReleaseDate" Variant="Variant.Filled" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudDatePicker Label="Pre-Production Completion Date" @bind-Date="project.PreProductionCompletionDate" Variant="Variant.Filled" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudDatePicker Label="Production Completion Date" @bind-Date="project.ProductionCompletion" Variant="Variant.Filled" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudDatePicker Label="Testing Estimated Completion Date" @bind-Date="project.TestingCompletion" Variant="Variant.Filled" />
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudCheckBox @bind-Checked="@HasArt" Label="Has Game Art?" Color="Color.Primary"></MudCheckBox>
                </MudItem>
                @if (HasArt)
                {
                    <MudItem xs="12" md="6">
                        <InputFile id="fileInput" OnChange="UploadFiles" hidden multiple />

                        <MudFab HtmlTag="label"
                            Color="Color.Primary"
                            Icon="@Icons.Filled.Image"
                            Label="Load picture"
                            for="fileInput" />
                        @if (files != null)
                        {
                            <MudText Typo="@Typo.h6">
                                @files.Count() File@(
                        files.Count() == 1 ? "" : "s"
                        ):
                            </MudText>
                            <MudList>
                                @foreach (var file in files)
                                {
                                    <MudListItem Icon="@Icons.Filled.AttachFile" @key="@file">
                                        @file.Name <code>@file.Size bytes</code>
                                    </MudListItem>
                                }
                            </MudList>
                        }
                    </MudItem>
                }

                <MudItem xs="12" md="6">
                    <MudCheckBox @bind-Checked="@Delayed" Label="Delayed ?" Color="Color.Primary"></MudCheckBox>
                </MudItem>
                @if (Delayed)
                {
                    <MudItem xs="12" md="6">
                        <MudSelect T="DelayType" @bind-Value="@project.DelayTypeNavigation" Label="Delay Type" Variant="Variant.Filled">
                            @foreach (var item in delayTypes)
                            {
                                <MudSelectItem T="DelayType" Value="item">@item.DelayType1</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                }
                @if (project.DelayTypeNavigation != null)
                {
                    @if (project.DelayTypeNavigation.Id == 1)
                    {
                        <MudTextField Lines="3" AdornmentIcon="@Icons.Material.Filled.Comment" Label="Reason For Pre Production Delay" Variant="Variant.Outlined" AdornmentColor="Color.Primary" @bind-Value="project.ReasonForDelayPreProd"></MudTextField>
                    }
                    @if (project.DelayTypeNavigation.Id == 2)
                    {
                        <MudTextField Lines="3" AdornmentIcon="@Icons.Material.Filled.Comment" Label="Reason For Production Delay" Variant="Variant.Outlined" AdornmentColor="Color.Primary" @bind-Value="project.ReasonForDelayProd"></MudTextField>
                    }
                    @if (project.DelayTypeNavigation.Id == 3)
                    {
                        <MudTextField Lines="3" AdornmentIcon="@Icons.Material.Filled.Comment" Label="Reason For Testing Delay" Variant="Variant.Outlined" AdornmentColor="Color.Primary" @bind-Value="project.ResonForDelayTest"></MudTextField>
                    }
                    @if (project.DelayTypeNavigation.Id == 4)
                    {
                        <MudTextField Lines="3" AdornmentIcon="@Icons.Material.Filled.Comment" Label="Reason For Releaser Delay" Variant="Variant.Outlined" AdornmentColor="Color.Primary" @bind-Value="project.ReasonForDelayrelease"></MudTextField>
                    }
                }
            </MudGrid>

        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Cancel" Color="Color.Error">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Save" Color="Color.Success" OnClick="Submit">Submit</MudButton>
    </DialogActions>
</MudDialog>

@code {
    public DateTime? ReleaseDate = DateTime.Today;
    [Parameter] public Project project { get; set; } = new Project();
    protected bool HasArt = false;
    protected bool Delayed = false;

    protected IList<ProjectType> projectTypes = new List<ProjectType>();
    protected IList<DelayType> delayTypes = new List<DelayType>();
    protected DelayType delayType = new();
    [Inject] IGenericRepositoryService _genericRepositoryService { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }
    [Inject]MudDialog MudDialog { get; set; }
    IList<IBrowserFile> files = new List<IBrowserFile>();
    protected override async Task OnInitializedAsync()
    {
        await GetDelayTypes();
        await GetProjectTypes();

    }

    private async Task GetProjectTypes()
    {
        var result = await _genericRepositoryService.GetAllAsync<ProjectType>("api/ProjectManagement/GetProjectTypes");
        projectTypes = result.ToList();
    }
    private async Task GetDelayTypes()
    {
        var result = await _genericRepositoryService.GetAllAsync<DelayType>("api/ProjectManagement/GetDelayTypes");
        delayTypes = result.ToList();
    }

    async Task UploadFiles(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        foreach (var file in e.GetMultipleFiles(10))
        {
            var resizeImage = await file.RequestImageFileAsync(format, 200, 200);
            var buffer = new byte[resizeImage.Size];
            await resizeImage.OpenReadStream().ReadAsync(buffer);
            var imagedata = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            project.ProjectImage = imagedata;

        }

        Snackbar.Add("Image Uploaded Succefully", Severity.Success);
    }
    async void Submit()
    {
        await _genericRepositoryService.UpdateAsync("api/ProjectManagement/UpdateProject", project);
        Snackbar.Add("Successfully Updated", Severity.Success);
        MudDialog.Close();
    }
}


